#### Utils

Utility methods
<br /><br />
To invoke some utility method just call to **Utils.UTIL_NAME(UTIL_PARAMS)** or **U.UTIL_NAME(UTIL_PARAMS)**, like so
```pascal
    if Utils.InRangeI(x,0,5) then //Check x is in range of [0;5]
      ...
```
or, in short form 
```pascal
    if U.InRangeI(x,0,5) then //Check x is in range of [0;5]
      ...
```

***

Other scripts functions:
* [Mission Scripts Dynamic Events](https://github.com/reyandme/kam_remake/wiki/MissionScriptsDynamicEvents)
* [Mission Scripts Dynamic Actions](https://github.com/reyandme/kam_remake/wiki/MissionScriptsDynamicActions)
* [Mission Scripts Dynamic States](https://github.com/reyandme/kam_remake/wiki/MissionScriptsDynamicStates)
<br />

| Ver<br>sion | Utility function<br/> Description | Parameters<br>and types | Returns |
| ------- | ------------------------------------ | -------------- | ------- |
| 7000+ | AbsI<sub><br/>Returns absolute value of specified integer</sub> | <sub>**aValue**: Integer;</sub> | <sub>Integer</sub> |
| 7000+ | AbsS<sub><br/>Returns absolute value of specified single number</sub> | <sub>**aValue**: Single;</sub> | <sub>Single</sub> |
| 7000+ | ArrayElementCount<sub><br/>Checks how many times specified string comes in requested array</sub> | <sub>**aElement**: AnsiString; <br> **aArray**: array of String;</sub> | <sub>Integer</sub> |
| 7000+ | ArrayElementCountB<sub><br/>Checks how many times specified boolean comes in requested array</sub> | <sub>**aElement**: Boolean; <br> **aArray**: array of Boolean;</sub> | <sub>Integer</sub> |
| 7000+ | ArrayElementCountI<sub><br/>Checks how many times specified integer comes in requested array</sub> | <sub>**aElement**: Integer; <br> **aArray**: array of Integer;</sub> | <sub>Integer</sub> |
| 7000+ | ArrayElementCountS<sub><br/>Checks how many times specified single comes in requested array</sub> | <sub>**aElement**: Single; <br> **aArray**: array of Single;</sub> | <sub>Integer</sub> |
| 7000+ | ArrayHasElement<sub><br/>Checks whether requested array has specified string</sub> | <sub>**aElement**: AnsiString; <br> **aArray**: array of String;</sub> | <sub>Boolean</sub> |
| 7000+ | ArrayHasElementB<sub><br/>Checks whether requested array has specified boolean</sub> | <sub>**aElement**: Boolean; <br> **aArray**: array of Boolean;</sub> | <sub>Boolean</sub> |
| 7000+ | ArrayHasElementI<sub><br/>Checks whether requested array has specified integer</sub> | <sub>**aElement**: Integer; <br> **aArray**: array of Integer;</sub> | <sub>Boolean</sub> |
| 7000+ | ArrayHasElementS<sub><br/>Checks whether requested array has specified single number</sub> | <sub>**aElement**: Single; <br> **aArray**: array of Single;</sub> | <sub>Boolean</sub> |
| 7000+ | ArrayRemoveIndexI<sub><br/>Removes element on specified index in specified array of integer.<br/>Integer array should be declared as TIntegerArray instead of array of integer.</sub> | <sub>**aIndex**: Integer; <br> **aArray**: array of Integer;</sub> | <sub>array of Integer</sub> |
| 7000+ | ArrayRemoveIndexS<sub><br/>Removes element on specified index in specified array of string.<br/>String array should be declared as TAnsiStringArray instead of array of AnsiString.</sub> | <sub>**aIndex**: Integer; <br> **aArray**: array of AnsiString;</sub> | <sub>TAnsiStringArray</sub> |
| 7000+ | BoolToStr<sub><br/>Return string representation of Boolean value: 'True' or 'False'</sub> | <sub>**aBool**: Boolean;</sub> | <sub>AnsiString</sub> |
| 10940 | ColorBrightness<sub><br/>Get Color Brightness from HEX BGR color</sub> | <sub>**aHexColor**: String;</sub> | <sub>Single //Color Brightness OR -1 if aHexColor not equal to HEX BGR</sub> |
| 7000+ | EnsureRangeI<sub><br/>Returns the closest to aValue integer that is in interval [aMin..aMax]</sub> | <sub>**aValue**: Integer; <br> **aMin**: Integer; <br> **aMax**: Integer;</sub> | <sub>Integer</sub> |
| 7000+ | EnsureRangeS<sub><br/>Returns the closest to aValue single number that is in interval [aMin..aMax]</sub> | <sub>**aValue**: Single; <br> **aMin**: Single; <br> **aMax**: Single;</sub> | <sub>Single</sub> |
| 7000+ | Format<sub><br/>Wrapper for pascal Format function<br/>Formats aFormatting string with specified aData array of parameters</sub> | <sub>**aFormatting**: String; <br> **aData**: array of const;</sub> | <sub>string</sub> |
| 7000+ | IfThen<sub><br/>Checks condition aBool and returns aTrue/aFalse string depending on check result</sub> | <sub>**aBool**: Boolean; <br> **aTrue**: AnsiString; <br> **aFalse**: AnsiString;</sub> | <sub>AnsiString</sub> |
| 7000+ | IfThenI<sub><br/>Checks condition aBool and returns aTrue/aFalse integer depending on check result</sub> | <sub>**aBool**: Boolean; <br> **aTrue**: Integer; <br> **aFalse**: Integer;</sub> | <sub>Integer</sub> |
| 7000+ | IfThenS<sub><br/>Checks condition aBool and returns aTrue/aFalse single number depending on check result</sub> | <sub>**aBool**: Boolean; <br> **aTrue**: Single; <br> **aFalse**: Single;</sub> | <sub>Single</sub> |
| 7000+ | InAreaI<sub><br/>2D variant of InRange, can be used for unit locs checks</sub> | <sub>**aX**: Integer; <br> **aY**: Integer; <br> **aXMin**: Integer; <br> **aYMin**: Integer; <br> **aXMax**: Integer; <br> **aYMax**: Integer;</sub> | <sub>Boolean</sub> |
| 7000+ | InAreaS<sub><br/>2D variant of InRange</sub> | <sub>**aX**: Single; <br> **aY**: Single; <br> **aXMin**: Single; <br> **aYMin**: Single; <br> **aXMax**: Single; <br> **aYMax**: Single;</sub> | <sub>Boolean</sub> |
| 7000+ | InRangeI<sub><br/>Checks whether specified aValue is in interval [aMin..aMax]</sub> | <sub>**aValue**: Integer; <br> **aMin**: Integer; <br> **aMax**: Integer;</sub> | <sub>Boolean</sub> |
| 7000+ | InRangeS<sub><br/>Checks whether specified aValue is in interval [aMin..aMax]</sub> | <sub>**aValue**: Single; <br> **aMin**: Single; <br> **aMax**: Single;</sub> | <sub>Boolean</sub> |
| 7000+ | KMPoint<sub><br/>Returns point record with specified coordinates</sub> | <sub>**X,Y**: Integer;</sub> | <sub>TKMPoint</sub> |
| 7000+ | MaxI<sub><br/>Returns max number of two specified</sub> | <sub>**A**: Integer; <br> **B**: Integer;</sub> | <sub>Integer</sub> |
| 7000+ | MaxInArrayI<sub><br/>Returns max number of array elements</sub> | <sub>**aArray**: array of Integer;</sub> | <sub>Integer</sub> |
| 7000+ | MaxInArrayS<sub><br/>Returns max number of array elements</sub> | <sub>**aArray**: array of Single;</sub> | <sub>Single</sub> |
| 7000+ | MaxS<sub><br/>Returns max number of two specified</sub> | <sub>**A**: Single; <br> **B**: Single;</sub> | <sub>Single</sub> |
| 7000+ | MinI<sub><br/>Returns min number of two specified</sub> | <sub>**A**: Integer; <br> **B**: Integer;</sub> | <sub>Integer</sub> |
| 7000+ | MinInArrayI<sub><br/>Returns min number of array elements</sub> | <sub>**aArray**: array of Integer;</sub> | <sub>Integer</sub> |
| 7000+ | MinInArrayS<sub><br/>Returns min number of array elements</sub> | <sub>**aArray**: array of Single;</sub> | <sub>Single</sub> |
| 7000+ | MinS<sub><br/>Returns min number of two specified</sub> | <sub>**A**: Single; <br> **B**: Single;</sub> | <sub>Single</sub> |
| 7000+ | Power<sub><br/>Exponentation, base 'Base' raised to power 'Exp'.<br/>F.e. Power(3, 2) = 3^2 = 9<br/>Returns base "Base" raised to power "Exp"</sub> | <sub>**aBase**: Extended; <br> **aExp**: Extended;</sub> | <sub>Extended</sub> |
| 10940 | RGBDecToBGRHex<sub><br/>Converts RGB to HEX BGR color<br/>Example<br/>VAR := RGBDecToBGRHex(255, 255, 0);<br/>The result of the VAR will be 00FFFF</sub> | <sub>**aR**: Byte; <br> **aG**: Byte; <br> **aB**: Byte;</sub> | <sub>AnsiString //HEX BGR Color</sub> |
| 10940 | RGBToBGRHex<sub><br/>Converts HEX RGB to HEX BGR color<br/>Example<br/>VAR := RGBToBGRHex('#FFFF00');<br/>The result of the VAR will be 00FFFF</sub> | <sub>**aHexColor**: String;</sub> | <sub>AnsiString //HEX BGR Color or '' if aHexColor not equal to HEX RGB</sub> |
| 7000+ | RoundToDown<sub><br/>Rounds specified single number aValue to nearest multiple of specified base aBase. Rounding down. F.e. RoundToDown(11.7, 5) = 10</sub> | <sub>**aValue**: Single; <br> **aBase**: Integer;</sub> | <sub>Integer</sub> |
| 7000+ | RoundToUp<sub><br/>Rounds specified single number aValue to nearest multiple of specified base aBase. Rounding up. F.e. RoundToUp(11.7, 5) = 15</sub> | <sub>**aValue**: Single; <br> **aBase**: Integer;</sub> | <sub>Integer</sub> |
| 7000+ | Sqr<sub><br/>Returns A^2 = A*A</sub> | <sub>**A**: Extended;</sub> | <sub>Extended</sub> |
| 7000+ | SumI<sub><br/>Returns sum of the elements of requested array</sub> | <sub>**aArray**: array of Integer;</sub> | <sub>Integer</sub> |
| 7000+ | SumS<sub><br/>Returns sum of the elements of requested array</sub> | <sub>**aArray**: array of Single;</sub> | <sub>Single</sub> |
| 7000+ | TimeToString<sub><br/>Converts game ticks count into string: HH:MM:SS<br/>Can be used for scripted timers</sub> | <sub>**aTicks**: Integer;</sub> | <sub>AnsiString</sub> |
| 10940 | TimeToTick<sub><br/>Converts Time in game ticks</sub> | <sub>**aHours**: Integer; <br> **aMinutes**: Integer; <br> **aSeconds**: Integer;</sub> | <sub>Cardinal //game ticks</sub> |
