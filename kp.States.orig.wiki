####States

| Ver<br>sion | State Description | Parameters<br>and types | Returns |
| ------- | --------------- | -------------------- | ------- |
| 7969 | EntityType<br><sub> Get the entity type by its UID (0 - unknown or none, 1 - Unit, 2 - House, 3 - UnitGroup, 4 - Stockpile)</sub> | <sub>aEntityID: Integer;</sub> | <sub>Integer</sub> |
| - | FogRevealed<br><sub> See if tile is revealed (known or live)</sub> | <sub>aPlayer: Integer; <br> aX: Word; <br> aY: Word;</sub> | <sub>Boolean</sub> |
| - | GameTime<br><sub> Deprecated. Please use the time provided by OnTick event</sub> | <sub></sub> | <sub>Cardinal</sub> |
| - | GroupAt<br><sub> Return UID of a group at requested coordinates</sub> | <sub>aX: Word; <br> aY: Word;</sub> | <sub>Integer</sub> |
| - | GroupColumnCount<br><sub></sub> | <sub>aGroupID: Integer;</sub> | <sub>Integer</sub> |
| - | GroupDead<br><sub> See if the group is dead (all members are dead)</sub> | <sub>aGroupID: Integer;</sub> | <sub>Boolean</sub> |
| 5632 | GroupIsIdle<br><sub> See if the group is idle (ready to take orders)</sub> | <sub>aGroupID: Integer;</sub> | <sub>Boolean</sub> |
| - | GroupMember<br><sub> Get N-th group member</sub> | <sub>aGroupID: Integer; <br> aMemberIndex: Integer;</sub> | <sub>Integer</sub> |
| - | GroupMemberCount<br><sub> Returns how many member there are in this group</sub> | <sub>aGroupID: Integer;</sub> | <sub>Integer</sub> |
| - | GroupOwner<br><sub> Returns to which Hand this group belongs</sub> | <sub>aGroupID: Integer;</sub> | <sub>Integer</sub> |
| - | HouseAt<br><sub> Get the house at coordinates</sub> | <sub>aX: Word; <br> aY: Word;</sub> | <sub>Integer</sub> |
| - | HouseDamage<br><sub> Check house damage</sub> | <sub>aHouseID: Integer;</sub> | <sub>Integer</sub> |
| -7015 | HouseDeliveryBlocked<br><sub> Use HouseWareBlock instead</sub> | <sub>aHouseID: Integer; <br> aWareType: TKMWareType;</sub> | <sub>Boolean</sub> |
| - | HouseDestroyed<br><sub></sub> | <sub>aHouseID: Integer;</sub> | <sub>Boolean</sub> |
| -6102 | HouseHasOccupant<br><sub> Replaced with HouseHasWorker</sub> | <sub>aHouseID: Integer;</sub> | <sub></sub> |
| 6102 | HouseHasWorker<br><sub> Check if the house has a worker assigned to it</sub> | <sub>aHouseID: Integer;</sub> | <sub>Boolean</sub> |
| - | HouseIsComplete<br><sub> Check if house is complete</sub> | <sub>aHouseID: Integer;</sub> | <sub>Boolean</sub> |
| - | HouseOwner<br><sub></sub> | <sub>aHouseID: Integer;</sub> | <sub>Integer</sub> |
| - | HousePositionX<br><sub></sub> | <sub>aHouseID: Integer;</sub> | <sub>Integer</sub> |
| - | HousePositionY<br><sub></sub> | <sub>aHouseID: Integer;</sub> | <sub>Integer</sub> |
| - | HouseRepair<br><sub> Check if house repair is enabled</sub> | <sub>aHouseID: Integer;</sub> | <sub>Boolean</sub> |
| 4820 | HouseTrainQueuePeek<br><sub> Get the unit type in the houses queue (School/Fort/Barracks)</sub> | <sub>aHouseID: Integer; <br> QueueIndex: Integer;</sub> | <sub>TKMUnitType</sub> |
| - | HouseType<br><sub></sub> | <sub>aHouseID: Integer;</sub> | <sub>TKMHouseType</sub> |
| 7021 | HouseWareBlock<br><sub></sub> | <sub>aHouseID: Integer; <br> aWareType: TKMWareType;</sub> | <sub>Integer</sub> |
| - | HouseWareInside<br><sub></sub> | <sub>aHouseID: Integer; <br> aWareType: TKMWareType;</sub> | <sub>Integer</sub> |
| - | HouseWeaponsOrdered<br><sub></sub> | <sub>aHouseID: Integer; <br> aWareType: TKMWareType;</sub> | <sub>Integer</sub> |
| - | HouseWoodcutterChopOnly<br><sub></sub> | <sub>aHouseID: Integer;</sub> | <sub>Boolean</sub> |
| - | IsFieldAt<br><sub> Check if there is a field owned by player at coordinates</sub> | <sub>aPlayer: Integer; // Player - player to whom field must belong. -1 stands for any player <br> aX: Word; <br> aY: Word;</sub> | <sub>Boolean</sub> |
| - | IsOrchardAt<br><sub> Check if there is a orchard owned by player at coordinates</sub> | <sub>aPlayer: Integer; // Player - player to whom orchard must belong. -1 stands for any player <br> aX: Word; <br> aY: Word;</sub> | <sub>Boolean</sub> |
| - | IsRoadAt<br><sub> Check if there is a road owned by player at coordinates</sub> | <sub>aPlayer: Integer; // Player - player to whom road must belong. -1 stands for any player <br> aX: Word; <br> aY: Word;</sub> | <sub>Boolean</sub> |
| - | PeaceTime<br><sub> Get the peacetime (in game ticks)</sub> | <sub></sub> | <sub>Cardinal</sub> |
| - | PlayerAllianceCheck<br><sub></sub> | <sub>aPlayer1: Integer; <br> aPlayer2: Integer;</sub> | <sub>Boolean</sub> |
| - | PlayerColorText<br><sub> Get the string with color code of the player</sub> | <sub>aPlayer: Integer;</sub> | <sub>UnicodeString</sub> |
| - | PlayerDefeated<br><sub></sub> | <sub>aPlayer: Integer;</sub> | <sub>Boolean</sub> |
| - | PlayerEnabled<br><sub> Check if hand is enabled (chosen to be played by anyone on mission start)</sub> | <sub>aPlayer: Integer;</sub> | <sub>Boolean</sub> |
| - | PlayerGetAllGroups<br><sub> Get list of all players groups</sub> | <sub>aPlayer: Integer;</sub> | <sub>array of Integer</sub> |
| - | PlayerGetAllHouses<br><sub></sub> | <sub>aPlayer: Integer;</sub> | <sub>array of Integer</sub> |
| - | PlayerGetAllUnits<br><sub></sub> | <sub>aPlayer: Integer;</sub> | <sub>array of Integer</sub> |
| - | PlayerHouseCanBuild<br><sub> Check if Player can build certain house type</sub> | <sub>aPlayer: Integer; <br> aHouseType: TKMHouseType;</sub> | <sub>Boolean</sub> |
| - | PlayerName<br><sub> Get the players name</sub> | <sub>aPlayer: Integer;</sub> | <sub>UnicodeString</sub> |
| - | PlayerVictorious<br><sub></sub> | <sub>aPlayer: Integer;</sub> | <sub>Boolean</sub> |
| - | PlayerWareDistribution<br><sub></sub> | <sub>aPlayer: Integer; <br> aWareType: TKMWareType; <br> aHouseType: TKMHouseType;</sub> | <sub>Byte</sub> |
| - | StatArmyCount<br><sub></sub> | <sub>aPlayer: Integer;</sub> | <sub>Integer</sub> |
| - | StatCitizenCount<br><sub></sub> | <sub>aPlayer: Integer;</sub> | <sub>Integer</sub> |
| - | StatHouseTypeCount<br><sub></sub> | <sub>aPlayer: Integer; <br> aHouseType: TKMHouseType;</sub> | <sub>Integer</sub> |
| - | StatPlayerCount<br><sub> See how many enabled players there are in the mission (chosen to be played by anyone on mission start)</sub> | <sub></sub> | <sub>Integer</sub> |
| - | StatUnitCount<br><sub> See how many units player has alive</sub> | <sub>aPlayer: Integer;</sub> | <sub>Integer</sub> |
| - | StatUnitKilledCount<br><sub> See how many units player has killed</sub> | <sub>aPlayer: Integer; <br> aUnitType: TKMUnitType;</sub> | <sub>Integer</sub> |
| - | StatUnitLostCount<br><sub> See how many units player has lost</sub> | <sub>aPlayer: Integer; <br> aUnitType: TKMUnitType;</sub> | <sub>Integer</sub> |
| - | StatUnitTypeCount<br><sub> See how many units of certain type player has alive</sub> | <sub>aPlayer: Integer; <br> aUnitType: TKMUnitType;</sub> | <sub>Integer</sub> |
| 5606 | StatWaresBalance<br><sub> See how many wares player has at the moment</sub> | <sub>aPlayer: Integer; <br> aWareType: TKMWareType;</sub> | <sub>Integer</sub> |
| 5606 | StatWaresProduced<br><sub> See how many wares were produced by the player</sub> | <sub>aPlayer: Integer; <br> aWareType: TKMWareType;</sub> | <sub>Integer</sub> |
| -6683 | SysRandom<br><sub> Moved to Utils.Random</sub> | <sub></sub> | <sub>Single</sub> |
| -6683 | SysRandomI<br><sub> Moved to Utils.RandomI</sub> | <sub>aMax: Integer;</sub> | <sub>Integer</sub> |
| - | UnitAt<br><sub> Return UID of the unit on requested coordinates</sub> | <sub>aX: Word; <br> aY: Word;</sub> | <sub>Integer</sub> |
| - | UnitCarryCount<br><sub> See how many wares that unit is carrying</sub> | <sub>aUnitID: Integer; <br> aWareType: TKMWareType;</sub> | <sub>Integer</sub> |
| - | UnitCarryType<br><sub> See ware type that unit is carrying</sub> | <sub>aUnitID: Integer;</sub> | <sub>TKMWareType</sub> |
| - | UnitDead<br><sub> Check if unit is dead</sub> | <sub>aUnitID: Integer;</sub> | <sub>Boolean</sub> |
| - | UnitDirection<br><sub> See unit facing direction (0 .. 7) -1 if direction is uninitialized</sub> | <sub>aUnitID: Integer;</sub> | <sub>Integer</sub> |
| 4829 | UnitGroup<br><sub> Return UID of a group to which requested Unit belongs</sub> | <sub>aUnitID: Integer;</sub> | <sub>Integer</sub> |
| 6692 | UnitHunger<br><sub> See unit hunger condition in seconds remaining till death Result within 0 and 2700 (45min)</sub> | <sub>aUnitID: Integer;</sub> | <sub>Integer</sub> |
| 6692 | UnitHungerLow<br><sub> Return fullness level of a unit when it becomes hungry, in seconds</sub> | <sub></sub> | <sub>Integer</sub> |
| 6692 | UnitHungerMax<br><sub> Return maximum fullness level of a unit, in seconds</sub> | <sub></sub> | <sub>Integer</sub> |
| - | UnitOwner<br><sub> See unit owner hand</sub> | <sub>aUnitID: Integer;</sub> | <sub>Integer</sub> |
| - | UnitPositionX<br><sub> Get rounded unit position X</sub> | <sub>aUnitID: Integer;</sub> | <sub>Integer</sub> |
| - | UnitPositionY<br><sub> Get rounded unit position Y</sub> | <sub>aUnitID: Integer;</sub> | <sub>Integer</sub> |
| - | UnitType<br><sub> See unit type</sub> | <sub>aUnitID: Integer;</sub> | <sub>TKMUnitType</sub> |
